/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var MeineArrays_1 = __webpack_require__(1);
var Test_1 = __webpack_require__(2);
(function () {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            var numbers = xhttp.responseText.split('\n');
            var ar_1 = [];
            numbers.forEach(function (n) { return ar_1.push(+n); });
            MeineArraysTest(ar_1);
        }
    };
    xhttp.open('GET', "QuickSort.txt");
    xhttp.send();
})();
function MeineArraysTest(ar) {
    var fileArray = ar;
    function newArrayFromFile() {
        return JSON.parse(JSON.stringify(fileArray));
    }
    var tests = new Set();
    tests.add(new Test_1.Test("empty array", function () {
        var ar = [];
        var comparisons = MeineArrays_1.MeineArrays.quickSort(ar);
        return ar.length === 0 && comparisons === 0;
    }));
    tests.add(new Test_1.Test("one element array", function () {
        var ar = [1];
        var comparisons = MeineArrays_1.MeineArrays.quickSort(ar);
        return ar.length === 1 && ar[0] === 1 && comparisons === 0;
    }));
    tests.add(new Test_1.Test("several elements array", function () {
        var ar = [11, 15, 13, 8, 1, 10, 16, 12];
        var comparisons = MeineArrays_1.MeineArrays.quickSort(ar);
        var EXPECTED = [1, 8, 10, 11, 12, 13, 15, 16];
        if (EXPECTED.length !== ar.length) {
            return false;
        }
        for (var i = 0; i < EXPECTED.length; i++) {
            if (ar[i] !== EXPECTED[i]) {
                return false;
            }
        }
        return true;
    }));
    tests.add(new Test_1.Test("QuickSort.txt", function () {
        var ar = newArrayFromFile();
        var comparisons = MeineArrays_1.MeineArrays.quickSort(ar);
        this.auxiliaryLog(comparisons + " comparisons");
        return verifyQuickSortTxt(ar);
    }));
    tests.add(new Test_1.Test("QuickSort.txt with strategy pattern", function () {
        var ar = newArrayFromFile();
        var comparisons = MeineArrays_1.MeineArrays.quickSortStrat(ar, {
            findPivot: function (l, r) {
                return Math.floor(Math.random() * (r - l)) + l;
            }
        });
        this.auxiliaryLog(comparisons + " comparisons");
        return verifyQuickSortTxt(ar);
    }));
    tests.forEach(function (test) {
        test.test();
    });
}
function verifyQuickSortTxt(ar) {
    var isPass = true;
    for (var i = 0; i < ar.length; i++) {
        if (ar[i] !== i + 1) {
            isPass = false;
            break;
        }
    }
    return isPass;
}


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var MeineArrays = /** @class */ (function () {
    function MeineArrays() {
    }
    MeineArrays.quickSort = function (ar) {
        return MeineArrays.quickSortRecursive(ar, 0, ar.length - 1);
    };
    MeineArrays.quickSortRecursive = function (ar, p, r) {
        if (p < r) {
            var q = MeineArrays.partition(ar, p, r);
            var comparisons = r - p;
            comparisons += MeineArrays.quickSortRecursive(ar, p, q - 1);
            comparisons += MeineArrays.quickSortRecursive(ar, q + 1, r);
            return comparisons;
        }
        else {
            return 0;
        }
    };
    MeineArrays.quickSortStrat = function (ar, st) {
        return MeineArrays.quickSortStratRecursive(ar, 0, ar.length - 1, st);
    };
    MeineArrays.quickSortStratRecursive = function (ar, p, r, st) {
        if (p < r) {
            var pivot = st.findPivot(p, r);
            MeineArrays.swap(ar, pivot, r);
            var q = MeineArrays.partition(ar, p, r);
            var comparisons = r - p;
            comparisons += MeineArrays.quickSortStratRecursive(ar, p, q - 1, st);
            comparisons += MeineArrays.quickSortStratRecursive(ar, q + 1, r, st);
            return comparisons;
        }
        else {
            return 0;
        }
    };
    MeineArrays.partition = function (ar, p, r) {
        var x = ar[r];
        var i = p - 1;
        for (var j = p; j < r; j++) {
            if (ar[j] <= x) {
                i++;
                MeineArrays.swap(ar, i, j);
            }
        }
        i++;
        MeineArrays.swap(ar, i, r);
        return i;
    };
    MeineArrays.swap = function (ar, i, j) {
        var tmp = ar[i];
        ar[i] = ar[j];
        ar[j] = tmp;
    };
    return MeineArrays;
}());
exports.MeineArrays = MeineArrays;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var Test = /** @class */ (function () {
    function Test(name, testFn) {
        this.name = name;
        this.testFn = testFn;
        this.auxiliary = "";
    }
    Test.prototype.test = function () {
        var isPass = this.testFn();
        // let log: string = this.name;
        // if (this.auxiliary !== null) {
        //     log += " (" + this.auxiliary + ")";
        // }
        // log += ": %c" + (isPass ? "passed" : "failure");
        //
        // console.log(log, "color: " + (isPass ? "green" : "red"));
        var black = "color: black;";
        var green = "color: green;";
        var red = "color: red";
        if (isPass) {
            console.groupCollapsed("%cpassed: %c" + this.name, green, black);
        }
        else {
            console.group("%cfailed: %c" + this.name, red, black);
        }
        console.table({ "name": this.name, "auxiliary": this.auxiliary });
        console.groupEnd();
    };
    Test.prototype.getName = function () {
        return this.name;
    };
    Test.prototype.auxiliaryLog = function (auxiliary) {
        this.auxiliary = auxiliary;
    };
    return Test;
}());
exports.Test = Test;


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,