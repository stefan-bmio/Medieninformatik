/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var BinarySearch = /** @class */ (function () {
    function BinarySearch() {
    }
    /*
     * Calls the recursive function to binary search a number in an array of
     * numbers. Strictly speaking, that could be an array of any type of numbers
     * and an x argument of any type of number, not necessarily integers.
     */
    BinarySearch.binarySearchInt = function (ar, x) {
        BinarySearch.recursionCounter = 0;
        return BinarySearch.binarySearchIntRecursiv(ar, x, 0, ar.length);
    };
    BinarySearch.binarySearchIntRecursiv = function (ar, x, l, r) {
        if (l >= r) {
            return 0;
        }
        var i = Math.floor((l + r) / 2);
        if (ar[i] === x) {
            return i + 1;
        }
        var nextL = l;
        var nextR = r;
        if (ar[i] < x) {
            nextL = i + 1;
        }
        else {
            nextR = i;
        }
        // counting the recursive method calls only, not including the initial call
        BinarySearch.recursionCounter++;
        return BinarySearch.binarySearchIntRecursiv(ar, x, nextL, nextR);
    };
    /*
     * Calls the recursive function to binary search the object x in the array.
     * in order to compare them, the objects in the array and the object x must
     * be of a class which implements the Comparable interface.
     */
    BinarySearch.binarySearch = function (ar, x) {
        return BinarySearch.binarySearchRecursiv(ar, x, 0, ar.length);
    };
    BinarySearch.binarySearchRecursiv = function (ar, x, l, r) {
        if (l >= r) {
            return 0;
        }
        var i = Math.floor((l + r) / 2);
        if (ar[i].compareTo(x) === 0) {
            return i + 1;
        }
        var nextL = l;
        var nextR = r;
        if (ar[i].compareTo(x) < 0) {
            nextL = i + 1;
        }
        else {
            nextR = i;
        }
        return BinarySearch.binarySearchRecursiv(ar, x, nextL, nextR);
    };
    BinarySearch.getRecursionCount = function () {
        return BinarySearch.recursionCounter;
    };
    return BinarySearch;
}());
exports.BinarySearch = BinarySearch;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var testBinarySearchGeneric_1 = __webpack_require__(2);
var testBinarySearchInt_1 = __webpack_require__(3);
var binarySearch_1 = __webpack_require__(0);
(function test() {
    log('Test binary search (int)');
    testBinarySearchInt_1.testInt();
    log('Test binary search (generic)');
    testBinarySearchGeneric_1.testGeneric();
    log('Test 999');
    var ar = Array(1000).fill(0).map(function (v, i) { return i; });
    console.log('Zahl 12 gefunden an Position: ' + binarySearch_1.BinarySearch.binarySearchInt(ar, 12));
    console.log('Anzahl rekursiver Aufrufe: ' + binarySearch_1.BinarySearch.getRecursionCount());
    console.log('Zahl -1 nicht gefunden (Ergebnis: ' + binarySearch_1.BinarySearch.binarySearchInt(ar, -1) + ')');
    console.log('Anzahl rekursiver Aufrufe: ' + binarySearch_1.BinarySearch.getRecursionCount());
    log('Test 99999');
    ar = Array(100000).fill(0).map(function (v, i) { return i; });
    console.log('Zahl 12 gefunden an Position: ' + binarySearch_1.BinarySearch.binarySearchInt(ar, 12));
    console.log('Anzahl rekursiver Aufrufe: ' + binarySearch_1.BinarySearch.getRecursionCount());
    console.log('Zahl 100000 nicht gefunden (Ergebnis: ' + binarySearch_1.BinarySearch.binarySearchInt(ar, 100000) + ')');
    console.log('Anzahl rekursiver Aufrufe: ' + binarySearch_1.BinarySearch.getRecursionCount());
})();
function log(message) {
    console.log('');
    console.log('####');
    console.log('#### ' + message);
    console.log('####');
}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var binarySearch_1 = __webpack_require__(0);
function testGeneric() {
    var tests = new Set();
    tests.add(testEmptyArray);
    tests.add(testElementInArrayLength1);
    tests.add(testElementNotInArrayLength1);
    tests.add(testElementInArrayPosition1Length5);
    tests.add(testElementInArrayPosition5Length5);
    tests.add(testElementInArrayPosition2Length5);
    tests.add(testElementNotInArrayLength5);
    tests.forEach(function (fn) {
        console.log(fn.name + ': ' + (fn() ? 'success' : 'failed'));
    });
}
exports.testGeneric = testGeneric;
var Instrument = /** @class */ (function () {
    function Instrument(str) {
        this.str = str;
    }
    Instrument.prototype.compareTo = function (other) {
        if (this.str < other.str) {
            return -1;
        }
        if (this.str === other.str) {
            return 0;
        }
        return 1;
    };
    Instrument.createArray = function () {
        var strings = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            strings[_i] = arguments[_i];
        }
        var array = [];
        for (var _a = 0, strings_1 = strings; _a < strings_1.length; _a++) {
            var str = strings_1[_a];
            array.push(new Instrument(str));
        }
        return array;
    };
    return Instrument;
}());
function testEmptyArray() {
    var EXPECTED = 0;
    var actual = binarySearch_1.BinarySearch.binarySearch([], new Instrument('Accordion'));
    return EXPECTED === actual;
}
function testElementInArrayLength1() {
    var EXPECTED = 1;
    var actual = binarySearch_1.BinarySearch.binarySearch([new Instrument('Accordion')], new Instrument('Accordion'));
    return EXPECTED === actual;
}
function testElementNotInArrayLength1() {
    var EXPECTED = 0;
    var actual = binarySearch_1.BinarySearch.binarySearch([new Instrument('Accordion')], new Instrument('Bass guitar'));
    return EXPECTED === actual;
}
function testElementInArrayPosition1Length5() {
    var EXPECTED = 1;
    var ar = Instrument.createArray('Cymbals', 'Electric Guitar', 'Harmonica', 'Mandolin', 'Ukulele');
    var actual = binarySearch_1.BinarySearch.binarySearch(ar, new Instrument('Cymbals'));
    return EXPECTED === actual;
}
function testElementInArrayPosition5Length5() {
    var EXPECTED = 5;
    var ar = Instrument.createArray('Cymbals', 'Electric Guitar', 'Harmonica', 'Mandolin', 'Ukulele');
    var actual = binarySearch_1.BinarySearch.binarySearch(ar, new Instrument('Ukulele'));
    return EXPECTED === actual;
}
function testElementInArrayPosition2Length5() {
    var EXPECTED = 2;
    var ar = Instrument.createArray('Cymbals', 'Electric Guitar', 'Harmonica', 'Mandolin', 'Ukulele');
    var actual = binarySearch_1.BinarySearch.binarySearch(ar, new Instrument('Electric Guitar'));
    return EXPECTED === actual;
}
function testElementNotInArrayLength5() {
    var EXPECTED = 0;
    var ar = Instrument.createArray('Cymbals', 'Electric Guitar', 'Harmonica', 'Mandolin', 'Ukulele');
    var actual = binarySearch_1.BinarySearch.binarySearch(ar, new Instrument('Accordion'));
    return EXPECTED === actual;
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var binarySearch_1 = __webpack_require__(0);
function testInt() {
    var tests = new Set();
    tests.add(testEmptyIntArray);
    tests.add(testElementInIntArrayLength1);
    tests.add(testElementNotInIntArrayLength1);
    tests.add(testElementInIntArrayPosition1Length5);
    tests.add(testElementInIntArrayPosition5Length5);
    tests.add(testElementInIntArrayPosition3Length5);
    tests.add(testElementNotInIntArrayLength5);
    tests.forEach(function (fn) {
        console.log(fn.name + ': ' + (fn() ? 'success' : 'failed'));
    });
}
exports.testInt = testInt;
function testEmptyIntArray() {
    var EXPECTED = 0;
    var actual = binarySearch_1.BinarySearch.binarySearchInt([], 1);
    return EXPECTED === actual;
}
function testElementInIntArrayLength1() {
    var EXPECTED = 1;
    var actual = binarySearch_1.BinarySearch.binarySearchInt([1], 1);
    return EXPECTED === actual;
}
function testElementNotInIntArrayLength1() {
    var EXPECTED = 0;
    var actual = binarySearch_1.BinarySearch.binarySearchInt([1], 2);
    return EXPECTED === actual;
}
function testElementInIntArrayPosition1Length5() {
    var EXPECTED = 1;
    var actual = binarySearch_1.BinarySearch.binarySearchInt([3, 5, 8, 13, 21], 3);
    return EXPECTED === actual;
}
function testElementInIntArrayPosition5Length5() {
    var EXPECTED = 5;
    var actual = binarySearch_1.BinarySearch.binarySearchInt([3, 5, 8, 13, 21], 21);
    return EXPECTED === actual;
}
function testElementInIntArrayPosition3Length5() {
    var EXPECTED = 3;
    var actual = binarySearch_1.BinarySearch.binarySearchInt([3, 5, 8, 13, 21], 8);
    return EXPECTED === actual;
}
function testElementNotInIntArrayLength5() {
    var EXPECTED = 0;
    var actual = binarySearch_1.BinarySearch.binarySearchInt([3, 5, 8, 13, 21], 1);
    return EXPECTED === actual;
}


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,